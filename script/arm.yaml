#
## Description ################################################################
# This yaml file tries to detail all ARM instruction.
# It's used by Medusa to generate c++ code in order to disassemble ARM
# executable.
# Check out http://github.com/wisk/medusa for further information.

## Architecture information ###################################################
arch_info:
  name: arm
  insn_set_type: reduced

## Instruction format #########################################################

# Data Processing
data_proc_reg_fmt: &data_proc_reg_fmt
  rm_field: [0, 3]
  shf_field: [4, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  s_field: 20
  opcd_field: [21, 24]
  cond_field: [28, 31]

data_proc_imm_fmt: &data_proc_imm_fmt
  imm_field: [0, 7]
  rot_field: [8, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  s_field: 20
  opcd_field: [21, 24]
  cond_field: [28, 31]

# PSR Transfer
psr_transf_reg_fmt: &psr_transf_reg_fmt
  rm_field: [0, 3]
  rd_field: [12, 15]
  rn_field: [16, 19]
  s_field: 20
  opcd_field: [21, 24]
  cond_field: [28, 31]

psr_transf_imm_fmt: &psr_transf_imm_fmt
  imm_field: [0, 7]
  rot_field: [8, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  s_field: 20
  opcd_field: [21, 24]
  cond_field: [28, 31]

# Multiply
mul_fmt: &mul_fmt
  rm_field: [0, 3]
  rs_field: [8, 11]
  rn_field: [12, 15]
  rd_field: [16, 19]
  s_field: 20
  a_field: 21
  cond_field: [29, 31]

# Multiply long
mul_long_fmt: &mul_long_fmt
  rm_field: [0, 3]
  rn_field: [8, 11]
  rdlo_field: [12, 15]
  rdhi_field: [16, 19]
  s_field: 20
  a_field: 21
  u_field: 22
  cond_field: [29, 31]

# Single Data Swap
single_data_swap_fmt: &single_data_swap_fmt
  rm_field: [0, 3]
  rd_field: [12, 15]
  rn_field: [16, 19]
  b_field: 22
  cond_field: [29, 31]

# Branch and Exchange
br_xchg_fmt: &br_xchg_fmt
  rn_field: [0, 3]
  cond_field: [28, 31]

# Halfword Data Transfer: Register Offset
hword_data_transf_reg_fmt: &hword_data_transf_reg_fmt
  rm_field: [0, 3]
  h_field: 5
  s_field: 6
  rd_field: [12, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  u_field: 23
  p_field: 24
  cond_field: [28, 31]

# Halfword Data Transfer: Immediate Offset
hword_data_transf_imm_fmt: &hword_data_transf_imm_fmt
  off0_field: [0, 3]
  h_field: 5
  s_field: 6
  off1_field: [8, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  u_field: 23
  p_field: 24
  cond_field: [28, 31]

# Single Data with Immediate Transfer
single_data_transf_imm_fmt: &single_data_transf_imm_fmt
  imm_field: [0, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  u_field: 23
  p_field: 24
  i_field: 25
  cond_field: [28, 31]

# Single Data with Register Transfer
single_data_transf_reg_fmt: &single_data_transf_reg_fmt
  rm_field: [0, 3]
  shf_field: [4, 11]
  rd_field: [12, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  u_field: 23
  p_field: 24
  i_field: 25
  cond_field: [28, 31]

# Block Data Transfer
blk_data_transf_fmt: &blk_data_transf_fmt
  rl_field: [0, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  s_field: 22
  u_field: 23
  p_field: 24
  cond_field: [28, 31]

# Branch
br_fmt: &br_fmt
  off_field: [0, 23]
  l_field: 24
  cond_field: [28, 31]

# Coprocessor Data Transfer
coproc_data_transf_fmt: &coproc_data_transf_fmt
  off_field: [0, 7]
  cp_field: [8, 11]
  crd_field: [12, 15]
  rn_field: [16, 19]
  l_field: 20
  w_field: 21
  n_field: 22
  u_field: 23
  p_field: 24
  cond_field: [28, 31]

# Coprocessor Data Operation
coproc_data_oprt_fmt: &coproc_data_oprt_fmt
  crm_field: [0, 3]
  cp_field: [5, 7]
  cpn_field: [8, 11]
  crd_field: [12, 15]
  crn_field: [16, 19]
  cp_opc_field: [20, 23]
  cond_field: [28, 31]

# Coprocessor Register Transfer
coproc_reg_transf_fmt: &coproc_reg_transf_fmt
  crm_field: [0, 3]
  cp_field: [5, 7]
  cpn_field: [8, 11]
  rd_field: [12, 15]
  crn_field: [16, 19]
  l_field: 20
  cp_opc_field: [21, 23]
  cond_field: [28, 31]

# Software Interrupt
soft_int_fmt: &soft_int_fmt
  cond_field: [28, 31]

# Undefined
undef_fmt: &undef_fmt
  cond_field: [28, 31]

## Instruction definition #####################################################

arm32:
- mnemonic: bx
  mask: 0x0ffffff0
  value: 0x012fff10
  format: *br_xchg_fmt
  operation_type: call
  operand: [ rn_field ]
  semantic: id(pc) = rn

- mnemonic: b
  mask: 0x0e000000
  value: 0x0a000000
  format: *br_fmt
  operation_type: jmp
  operand: [ off_field ]
  semantic: id(pc) = id(pc) + off_field

- mnemonic: and
  mask: 0x0fe00000
  value: 0x00000000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn & rm

- mnemonic: eor
  mask: 0x0fe00000
  value: 0x00200000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn ^ rm

- mnemonic: sub
  mask: 0x0fe00000
  value: 0x00400000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn - rm

- mnemonic: rsb
  mask: 0x0fe00000
  value: 0x00600000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rm - rn - 1 + id(cf)

- mnemonic: add
  mask: 0x0fe00000
  value: 0x00800000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn + rm

- mnemonic: adc
  mask: 0x0fe00000
  value: 0x00a00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn + rm + id(cf)

- mnemonic: sbc
  mask: 0x0fe00000
  value: 0x00c00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn - rm - 1 + id(cf)

- mnemonic: rsc
  mask: 0x0fe00000
  value: 0x00e00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rm - rn - 1 + id(cf)

- mnemonic: tst
  mask: 0x0fe00000
  value: 0x01000000
  format: *data_proc_reg_fmt
  operand: [ rn_field, rm_field ]

- mnemonic: teq
  mask: 0x0fe00000
  value: 0x01200000
  format: *data_proc_reg_fmt
  operand: [ rn_field, rm_field ]

- mnemonic: cmp
  mask: 0x0fe00000
  value: 0x01400000
  format: *data_proc_reg_fmt
  operand: [ rn_field, rm_field ]

- mnemonic: cmn
  mask: 0x0fe00000
  value: 0x01600000
  format: *data_proc_reg_fmt
  operand: [ rn_field, rm_field ]

- mnemonic: orr
  mask: 0x0fe00000
  value: 0x01800000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rn | rm

- mnemonic: mov
  mask: 0x0fe00000
  value: 0x01a00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rm_field ]
  semantic: rd = rm

- mnemonic: bic
  mask: 0x0fe00000
  value: 0x01c00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]
  semantic: rd = rm ^ 0xffffffff & rn

- mnemonic: mvn
  mask: 0x0fe00000
  value: 0x01e00000
  format: *data_proc_reg_fmt
  operand: [ rd_field, rm_field ]
  semantic: rd = 0xffffffff ^ rm

- mnemonic: and
  mask: 0x0fe00000
  value: 0x02000000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn & rm

- mnemonic: eor
  mask: 0x0fe00000
  value: 0x02200000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn ^ rm

- mnemonic: sub
  mask: 0x0fe00000
  value: 0x02400000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn - rm

- mnemonic: rsb
  mask: 0x0fe00000
  value: 0x02600000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = imm - rn

- mnemonic: add
  mask: 0x0fe00000
  value: 0x02800000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn + imm

- mnemonic: adc
  mask: 0x0fe00000
  value: 0x02a00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn + imm + id(cf)

- mnemonic: sbc
  mask: 0x0fe00000
  value: 0x02c00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = rn - imm - 1 + id(cf)

- mnemonic: rsc
  mask: 0x0fe00000
  value: 0x02e00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = imm - rn - 1 + id(cf)

- mnemonic: tst
  mask: 0x0fe00000
  value: 0x03000000
  format: *data_proc_imm_fmt
  operand: [ rn_field, imm_field ]

- mnemonic: teq
  mask: 0x0fe00000
  value: 0x03200000
  format: *data_proc_imm_fmt
  operand: [ rn_field, imm_field ]

- mnemonic: cmp
  mask: 0x0fe00000
  value: 0x03400000
  format: *data_proc_imm_fmt
  operand: [ rn_field, imm_field ]

- mnemonic: cmn
  mask: 0x0fe00000
  value: 0x03600000
  format: *data_proc_imm_fmt
  operand: [ rn_field, imm_field ]

- mnemonic: orr
  mask: 0x0fe00000
  value: 0x03800000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = op1 | op2

- mnemonic: mov
  mask: 0x0fe00000
  value: 0x03a00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, imm_field ]
  semantic: rd = op2

- mnemonic: bic
  mask: 0x0fe00000
  value: 0x03c00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]
  semantic: rd = imm ^ 0xffffffff & rn

- mnemonic: mvn
  mask: 0x0fe00000
  value: 0x03e00000
  format: *data_proc_imm_fmt
  operand: [ rd_field, imm_field ]
  semantic: rd = 0xffffffff ^ imm

- mnemonic: mrs
  mask: 0x0fbf0fff
  value: 0x010f0000
  format: *psr_transf_reg_fmt

- mnemonic: msr
  mask: 0x0db0f000
  value: 0x0120f000
  format: *psr_transf_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]

- mnemonic: msr
  mask: 0x0db0f000
  value: 0x0160f000
  format: *psr_transf_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]

- mnemonic: mul
  mask: 0x0fe000f0
  value: 0x00000090
  format: *mul_fmt
  operand: [ rd_field, rm_field, rs_field ]
  semantic: rd = rm * rs

- mnemonic: mla
  mask: 0x0fe000f0
  value: 0x00200090
  format: *mul_fmt
  operand: [ rd_field, rm_field, rs_field, rn_field ]
  semantic: rd = rm * rs + rn

- mnemonic: mull
  mask: 0x0fa000f0
  value: 0x00800090
  format: *mul_long_fmt

- mnemonic: mlal
  mask: 0x0fa000f0
  value: 0x00a00090
  format: *mul_long_fmt

- mnemonic: str
  mask: 0x0e100000
  value: 0x06000000
  format: *single_data_transf_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]

- mnemonic: str
  mask: 0x0e100000
  value: 0x04000000
  format: *single_data_transf_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]

- mnemonic: ldr
  mask: 0x0e100000
  value: 0x06100000
  format: *single_data_transf_reg_fmt
  operand: [ rd_field, rn_field, rm_field ]

- mnemonic: ldr
  mask: 0x0e100000
  value: 0x04100000
  format: *single_data_transf_imm_fmt
  operand: [ rd_field, rn_field, imm_field ]

- mnemonic: str
  mask: 0x0e500f90
  value: 0x00400090
  format: *hword_data_transf_reg_fmt

- mnemonic: ldr
  mask: 0x0e500f90
  value: 0x00500090
  format: *hword_data_transf_reg_fmt

- mnemonic: str
  mask: 0x0e500f90
  value: 0x00000090
  format: *hword_data_transf_imm_fmt

- mnemonic: ldr
  mask: 0x0e500f90
  value: 0x00100090
  format: *hword_data_transf_imm_fmt

- mnemonic: stm
  mask: 0x0e100000
  value: 0x08000000
  format: *blk_data_transf_fmt
  operand: [ rn_field, rl_field ]

- mnemonic: ldm
  mask: 0x0e100000
  value: 0x08100000
  format: *blk_data_transf_fmt
  operand: [ rn_field, rl_field ]

- mnemonic: swi
  mask: 0x0f000000
  value: 0x0f000000
  format: *soft_int_fmt

- mnemonic: cdp
  mask: 0x0f000010
  value: 0x0e000000
  format: *coproc_data_oprt_fmt

- mnemonic: stc
  mask: 0x0e100000
  value: 0x0c000000
  format: *coproc_data_transf_fmt

- mnemonic: ldc
  mask: 0x0e100000
  value: 0x0c100000
  format: *coproc_data_transf_fmt

- mnemonic: mcr
  mask: 0x0f100010
  value: 0x0e000010
  format: *coproc_reg_transf_fmt

- mnemonic: mrc
  mask: 0x0f100010
  value: 0x0e100010
  format: *coproc_reg_transf_fmt
